--[[

     Awesome 4 theme to use with github.com/copycat-killer

--]]

-- {{{ Required libraries
local gears         = require("gears")
local awful         = require("awful")
                      require("awful.autofocus")
local wibox         = require("wibox")
local beautiful     = require("beautiful")
-- local naughty       = require("naughty")
local lain          = require("lain")
local freedesktop   = require("freedesktop")
local hotkeys_popup = require("awful.hotkeys_popup").widget
-- }}}

-- {{{ Error handling
if awesome.startup_errors then
  -- naughty.notify({ preset = naughty.config.presets.critical,
  --                  title = "Oops, there were errors during startup!",
  --                  text = awesome.startup_errors })
end

do
  local in_error = false
  awesome.connect_signal("debug::error", function (err)
    if in_error then return end
    in_error = true

    -- naughty.notify({ preset = naughty.config.presets.critical,
    --                  title = "Oops, an error happened!",
    --                  text = tostring(err) })
    in_error = false
  end)
end
-- }}}

-- {{{ Autostart applications
local function run_once(cmd)
  findme = cmd
  firstspace = cmd:find(" ")
  if firstspace then
    findme = cmd:sub(0, firstspace-1)
  end
  awful.spawn.with_shell(string.format("pgrep -u $USER -x %s > /dev/null || (%s)", findme, cmd))
end

run_once("urxvtd")
run_once("blueman-applet")
run_once("nitrogen --restore")
run_once("thunderbird")
-- }}}

-- {{{ Variable definitions
-- beautiful init
beautiful.init(os.getenv("HOME") .. "/.config/awesome/themes/multicolor/theme.lua")

-- common
local modkey     = "Mod4"
local altkey     = "Mod1"
local terminal   = "urxvtc" or "xterm"
local editor     = os.getenv("EDITOR") or "vim" or "nano"

-- user defined
local browser    = "chromium"
local browser2   = "firefox-bin"
local gui_editor = "atom"
local graphics   = "gimp"
local mail       = "thunderbird-bin"

-- table of layouts to cover with awful.layout.inc, order matters.
local layouts = {
  awful.layout.suit.floating,
  awful.layout.suit.tile,
  awful.layout.suit.tile.left,
  awful.layout.suit.tile.bottom,
  awful.layout.suit.tile.top,
  awful.layout.suit.fair,
  awful.layout.suit.fair.horizontal,
  awful.layout.suit.spiral,
  awful.layout.suit.spiral.dwindle,
  awful.layout.suit.max,
}

local tags = {
  settings = {
    {
      names  = { "web", "mail", "spotify", "other" },
      layout = { layouts[2], layouts[2], layouts[2], layouts[1] }
    },
    {
      names  = { "term", "ed", "other" },
      layout = { layouts[4], layouts[2], layouts[1] }
    },
  }
}

-- lain
lain.layout.termfair.nmaster        = 3
lain.layout.termfair.ncol           = 1
lain.layout.termfair.center.nmaster = 3
lain.layout.termfair.center.ncol    = 1
-- }}}

-- {{{ Helper functions
local function client_menu_toggle_fn()
  local instance = nil

  return function ()
    if instance and instance.wibox.visible then
      instance:hide()
        instance = nil
    else
        instance = awful.menu.clients({ theme = { width = 250 } })
    end
  end
end
-- }}}

-- {{{ Menu
local myawesomemenu = {
  { "hotkeys", function() return false, hotkeys_popup.show_help end },
  { "manual", terminal .. " -e man awesome" },
  { "edit config", string.format("%s -e %s %s", terminal, editor, awesome.conffile) },
  { "restart", awesome.restart },
  { "quit", function() awesome.quit() end }
}

local mymainmenu = freedesktop.menu.build({
  before = {
    { "Awesome", myawesomemenu, beautiful.awesome_icon },
      -- other triads can be put here
  },

  after = {
    { "Open terminal", terminal },
      -- other triads can be put here
  }
})

-- {{{ Wibox
local markup = lain.util.markup

-- Textclock
os.setlocale(os.getenv("LANG")) -- to localize the clock
local clockicon = wibox.widget.imagebox(beautiful.widget_clock)
local mytextclock = wibox.widget.textclock(markup("#7788af", "%A %d %B ") .. markup("#535f7a", ">") .. markup("#de5e1e", " %H:%M "))

-- Calendar
lain.widgets.calendar.attach(mytextclock, { font_size = 10 })

-- Weather
local weathericon = wibox.widget.imagebox(beautiful.widget_weather)
local myweather = lain.widgets.weather({
  city_id = 3021372, -- placeholder
  weather_na_markup = markup("#eca4c4", "N/A "),
  settings = function()
    descr = weather_now["weather"][1]["description"]:lower()
    units = math.floor(weather_now["main"]["temp"])
    widget:set_markup(markup("#eca4c4", descr .. " @ " .. units .. "°C "))
  end
})

-- / fs
local fsicon = wibox.widget.imagebox(beautiful.widget_fs)
local fsroot = lain.widgets.fs({
  options = "--exclude-type=tmpfs",
  settings  = function()
    widget:set_markup(markup("#80d9d8", fs_now.used .. "% "))
  end
})

-- CPU
local cpuicon = wibox.widget.imagebox(beautiful.widget_cpu)
local cpuwidget = lain.widgets.cpu({
  settings = function()
    widget:set_markup(markup("#e33a6e", cpu_now.usage .. "% "))
  end
})

-- Coretemp
local tempicon = wibox.widget.imagebox(beautiful.widget_temp)
local tempwidget = lain.widgets.temp({
  tempfile = "/sys/class/thermal/thermal_zone2/temp",
  settings = function()
    widget:set_markup(markup("#f1af5f", coretemp_now .. "°C "))
  end
})

-- ALSA volume
local volicon = wibox.widget.imagebox(beautiful.widget_vol)
local volume = lain.widgets.alsa({
  settings = function()
    if volume_now.status == "off" then
      volume_now.level = volume_now.level .. "M"
    end

    widget:set_markup(markup("#7493d2", volume_now.level .. "% "))
  end
})

-- Net
local netdownicon = wibox.widget.imagebox(beautiful.widget_netdown)
local netdowninfo = wibox.widget.textbox()
local netupicon = wibox.widget.imagebox(beautiful.widget_netup)
local netupinfo = lain.widgets.net({
  settings = function()
    if iface ~= "network off" and string.match(myweather._private.layout.text, "N/A") then
      myweather.update()
    end

    widget:set_markup(markup("#e54c62", net_now.sent .. " "))
    netdowninfo:set_markup(markup("#87af5f", net_now.received .. " "))
  end
})

-- MEM
local memicon = wibox.widget.imagebox(beautiful.widget_mem)
local memwidget = lain.widgets.mem({
  settings = function()
    widget:set_markup(markup("#e0da37", mem_now.used .. "M "))
  end
})

-- Create a wibox for each screen and add it
local taglist_buttons = awful.util.table.join(
  awful.button({ }, 1, awful.tag.viewonly),
  awful.button({ modkey }, 1, awful.client.movetotag),
  awful.button({ }, 3, awful.tag.viewtoggle),
  awful.button({ modkey }, 3, awful.client.toggletag),
  awful.button({ }, 4, function(t) awful.tag.viewnext(awful.tag.getscreen(t)) end),
  awful.button({ }, 5, function(t) awful.tag.viewprev(awful.tag.getscreen(t)) end)
)

local tasklist_buttons = awful.util.table.join(
                     awful.button({ }, 1, function (c)
                                              if c == client.focus then
                                                  c.minimized = true
                                              else
                                                  -- Without this, the following
                                                  -- :isvisible() makes no sense
                                                  c.minimized = false
                                                  if not c:isvisible() and c.first_tag then
                                                      c.first_tag:view_only()
                                                  end
                                                  -- This will also un-minimize
                                                  -- the client, if needed
                                                  client.focus = c
                                                  c:raise()
                                              end
                                          end),
                     awful.button({ }, 3, client_menu_toggle_fn()),
                     awful.button({ }, 4, function ()
                                              awful.client.focus.byidx(1)
                                          end),
                     awful.button({ }, 5, function ()
                                              awful.client.focus.byidx(-1)
                                          end))

awful.screen.connect_for_each_screen(function(s)
    -- Tags
    tags[s] = awful.tag(tags.settings[s.index].names, s, tags.settings[s.index].layout)

    -- Create a promptbox for each screen
    s.mypromptbox = awful.widget.prompt()
    -- Create an imagebox widget which will contains an icon indicating which layout we're using.
    -- We need one layoutbox per screen.
    s.mylayoutbox = awful.widget.layoutbox(s)
    s.mylayoutbox:buttons(awful.util.table.join(
                           awful.button({ }, 1, function () awful.layout.inc( 1) end),
                           awful.button({ }, 3, function () awful.layout.inc(-1) end),
                           awful.button({ }, 4, function () awful.layout.inc( 1) end),
                           awful.button({ }, 5, function () awful.layout.inc(-1) end)))

    -- Create a taglist widget
    s.mytaglist = awful.widget.taglist(s, awful.widget.taglist.filter.all, taglist_buttons)

    -- Create a tasklist widget
    s.mytasklist = awful.widget.tasklist(s, awful.widget.tasklist.filter.currenttags, tasklist_buttons)

    -- Create the wibox
    s.mywibox = awful.wibar({ position = "top", screen = s, height = 20 })

    -- Add widgets to the wibox
    s.mywibox:setup {
        layout = wibox.layout.align.horizontal,
        { -- Left widgets
            layout = wibox.layout.fixed.horizontal,
            s.mytaglist,
            s.mylayoutbox,
            s.mypromptbox,
        },
        nil,
        { -- Right widgets
            layout = wibox.layout.fixed.horizontal,
            wibox.widget.systray(),
            netdownicon,
            netdowninfo,
            netupicon,
            netupinfo,
            volicon,
            volume,
            memicon,
            memwidget,
            cpuicon,
            cpuwidget,
            fsicon,
            fsroot,
            weathericon,
            myweather,
            tempicon,
            tempwidget,
            clockicon,
            mytextclock,
        },
    }
end)
-- }}}

-- {{{ Mouse bindings
root.buttons(awful.util.table.join(
  awful.button({ }, 3, function () mymainmenu:toggle() end),
  awful.button({ }, 4, awful.tag.viewnext),
  awful.button({ }, 5, awful.tag.viewprev)
))
-- }}}

-- {{{ Key bindings
globalkeys = awful.util.table.join(
  -- Tag browsing
  awful.key({ altkey, "Shift" }, "p",   awful.tag.viewprev,
            {description = "view previous", group = "tag"}),
  awful.key({ altkey, "Shift" }, "n",   awful.tag.viewnext,
            {description = "view next",     group = "tag"}),
  awful.key({ altkey, "Shift" }, "Tab", awful.tag.history.restore,
            {description = "go back",       group = "tag"}),

  awful.key({ modkey, "Shift" }, "n",
    function ()
      if client.focus then
        local next = awful.tag.getidx() + 1
        local tag = awful.tag.gettags(client.focus.screen)[next]
        if tag then
          awful.client.movetotag(tag)
          awful.tag.viewnext()
        end
     end
    end),

  awful.key({ modkey, "Shift" }, "p",
    function ()
      if client.focus then
        local previous = awful.tag.getidx() - 1
        local tag = awful.tag.gettags(client.focus.screen)[previous]
        if tag then
          awful.client.movetotag(tag)
          awful.tag.viewprev()
        end
     end
    end),


  -- Non-empty tag browsing
  awful.key({ altkey }, "p", function () lain.util.tag_view_nonempty(-1) end,
            {description = "view  previous nonempty", group = "tag"}),
  awful.key({ altkey }, "n", function () lain.util.tag_view_nonempty(1) end,
            {description = "view  previous nonempty", group = "tag"}),


  -- Layout manipulation
  awful.key({ altkey }, "o", function () awful.screen.focus_relative(1) end,
            {description = "focus the next screen", group = "screen"}),
  awful.key({ altkey,           }, "u", awful.client.urgent.jumpto,
            {description = "jump to urgent client", group = "client"}),
  awful.key({ modkey,           }, "Tab", function ()
    awful.client.focus.history.previous()
    if client.focus then
      client.focus:raise()
      end
    end,
    {description = "go back", group = "client"}
  ),

  -- Show/Hide Wibox
  awful.key({ modkey }, "b", function ()
    for s in screen do
      s.mywibox.visible = not s.mywibox.visible
    end
  end),

  -- Dynamic tagging
  awful.key({ modkey, "Shift" }, "a", function () lain.util.add_tag() end),
  awful.key({ modkey, "Shift" }, "r", function () lain.util.rename_tag() end),
  awful.key({ modkey, "Shift" }, "d", function () lain.util.delete_tag() end),

  -- Standard program
  awful.key({ modkey, "Shift" }, "r", awesome.restart,
            {description = "reload awesome", group = "awesome"}),
  awful.key({ modkey, "Shift"   }, "q", awesome.quit,
            {description = "quit awesome", group = "awesome"}),

  -- Layout manipulation
  awful.key({ modkey,           }, "space", function () awful.layout.inc( 1) end,
            {description = "select next", group = "layout"}),
  awful.key({ modkey, "Shift"   }, "space", function () awful.layout.inc(-1) end,
            {description = "select previous", group = "layout"}),

  -- Copy primary to clipboard
  awful.key({ modkey }, "c", function () os.execute("xsel | xsel -b") end),

  -- Volume control
  awful.key({ }, "XF86AudioRaiseVolume", function ()
    awful.util.spawn("pamixer -i 10", false) end),
  awful.key({ }, "XF86AudioLowerVolume", function ()
    awful.util.spawn("pamixer -d 10", false) end),
  awful.key({ }, "XF86AudioMute",        function ()
    awful.util.spawn("pamixer -t",    false) end),

  -- User programs
  awful.key({ modkey }, "e", function () awful.spawn(gui_editor) end),
  awful.key({ modkey }, "f", function () awful.spawn("firefox") end),
  awful.key({ modkey }, "g", function () awful.spawn(graphics) end),
  awful.key({ modkey }, "t", function () awful.spawn("thunar") end),
  awful.key({ modkey }, "u", function () awful.spawn(terminal) end),
  awful.key({ modkey }, "w", function () awful.spawn(browser) end),
  awful.key({ modkey }, "p", function () awful.spawn("pavucontrol") end),

  -- Prompt
  awful.key({ altkey }, "F2",
    function ()
      awful.screen.focused().mypromptbox:run()
    end,
    {description = "run prompt", group = "launcher"}
  ),

  awful.key({ altkey }, "F3",
    function ()
      awful.prompt.run {
        prompt       = "Run Lua code: ",
        textbox      = awful.screen.focused().mypromptbox.widget,
        exe_callback = awful.util.eval,
        history_path = awful.util.get_cache_dir() .. "/history_eval"
      }
    end,
    {description = "lua execute prompt", group = "awesome"}
  )
)

clientkeys = awful.util.table.join(
  awful.key({ modkey, "Shift"   }, "m",      lain.util.magnify_client ),
  awful.key({ modkey, "Shift"   }, "c",      function (c) c:kill() end,
            {description = "close", group = "client"})
)

clientbuttons = awful.util.table.join(
  awful.button({ }, 1, function (c) client.focus = c; c:raise() end),
  awful.button({ modkey }, 1, awful.mouse.client.move),
  awful.button({ modkey }, 3, awful.mouse.client.resize))

-- Set keys
root.keys(globalkeys)
-- }}}

-- {{{ Rules
-- Rules to apply to new clients (through the "manage" signal).
awful.rules.rules = {
    -- All clients will match this rule.
    { rule = { },
      properties = {
        border_width = beautiful.border_width,
        border_color = beautiful.border_normal,
        focus = awful.client.focus.filter,
        raise = true,
        keys = clientkeys,
        buttons = clientbuttons,
        screen = awful.screen.preferred,
        placement = awful.placement.no_overlap+awful.placement.no_offscreen,
        size_hints_honor = false
      }
    },

    -- Left screen
    { rule = { role = "browser" },
      properties = { screen = 1, tag = "web" } },

    { rule = { class = "Thunderbird" },
      properties = { screen = 1, tag = "mail" } },

    { rule = { class = "Spotify" },
      properties = { screen = 1, tag = "spotify" } },


    -- Right screen
    { rule = { class = "URxvt" },
      properties = { screen = 2, tag = "term" } },

    { rule = { class = "Atom" },
      properties = { screen = 2, tag = "ed" } },

    { rule = { class = "Thunar" },
      properties = { screen = 2, tag = "other" } },


    -- Other
    { rule = { class = "Battle.net" },
      properties = { screen = 2, tag = tags[3] } },

    -- Titlebars
    { rule_any = { type = { "dialog", "normal" } },
      properties = { titlebars_enabled = false } },
}
-- }}}

-- {{{ Signals
-- Signal function to execute when a new client appears.
client.connect_signal("manage", function (c)
  -- Set the windows at the slave,
  -- i.e. put it at the end of others instead of setting it master.
  -- if not awesome.startup then awful.client.setslave(c) end

  if awesome.startup and not c.size_hints.user_position and not c.size_hints.program_position then
    -- Prevent clients from being unreachable after screen count changes.
    awful.placement.no_offscreen(c)
  end
end)

-- Add a titlebar if titlebars_enabled is set to true in the rules.
client.connect_signal("request::titlebars", function(c)
    -- buttons for the titlebar
    local buttons = awful.util.table.join(
        awful.button({ }, 1, function()
            client.focus = c
            c:raise()
            awful.mouse.client.move(c)
        end),
        awful.button({ }, 3, function()
            client.focus = c
            c:raise()
            awful.mouse.client.resize(c)
        end)
    )

    awful.titlebar(c, {size = 16}) : setup {
        { -- Left
            awful.titlebar.widget.iconwidget(c),
            buttons = buttons,
            layout  = wibox.layout.fixed.horizontal
        },
        { -- Middle
            { -- Title
                align  = "center",
                widget = awful.titlebar.widget.titlewidget(c)
            },
            buttons = buttons,
            layout  = wibox.layout.flex.horizontal
        },
        { -- Right
            awful.titlebar.widget.floatingbutton (c),
            awful.titlebar.widget.maximizedbutton(c),
            awful.titlebar.widget.stickybutton   (c),
            awful.titlebar.widget.ontopbutton    (c),
            awful.titlebar.widget.closebutton    (c),
            layout = wibox.layout.fixed.horizontal()
        },
        layout = wibox.layout.align.horizontal
    }
end)

-- Enable sloppy focus, so that focus follows mouse.
client.connect_signal("mouse::enter", function(c)
  if awful.layout.get(c.screen) ~= awful.layout.suit.magnifier
    and awful.client.focus.filter(c) then
    client.focus = c
  end
end)

-- No border for maximized clients
client.connect_signal("focus", function(c)
  if c.maximized_horizontal == true and c.maximized_vertical == true then
    c.border_width = 0
    -- no borders if only 1 client visible
  elseif #awful.client.visible(mouse.screen) > 1 then
    c.border_width = beautiful.border_width
    c.border_color = beautiful.border_focus
  end
end)
client.connect_signal("unfocus", function(c) c.border_color = beautiful.border_normal end)
-- }}}
