--[[

    Awesome 3.5 theme to use with github.com/copycat-killer

--]]


-- {{{ Required libraries
local gears     = require("gears")
local awful     = require("awful")
awful.rules     = require("awful.rules")
                  require("awful.autofocus")
local wibox     = require("wibox")
local beautiful = require("beautiful")
local drop      = require("scratchdrop")
local lain      = require("lain")
-- }}}

-- {{{ Autostart applications
function run_once(cmd)
  findme = cmd
  firstspace = cmd:find(" ")
  if firstspace then
     findme = cmd:sub(0, firstspace-1)
  end
  awful.util.spawn_with_shell("pgrep -u $USER -x " .. findme .. " > /dev/null || (" .. cmd .. ")")
end

run_once("urxvtd")
run_once("blueman-applet")
run_once("nitrogen --restore")
run_once("thunderbird-bin")
-- }}}

-- {{{ Variable definitions

-- beautiful init
beautiful.init(os.getenv("HOME") .. "/.config/awesome/themes/multicolor/theme.lua")

-- common
modkey     = "Mod4"
altkey     = "Mod1"
terminal   = "urxvtc" or "xterm"
editor     = os.getenv("EDITOR") or "vim" or "nano"
editor_cmd = terminal .. " -e " .. editor

-- user defined
browser    = "chromium"
browser2   = "firefox-bin"
mail       = "thunderbird-bin"

local layouts = {
  awful.layout.suit.floating,
  awful.layout.suit.tile,
  awful.layout.suit.tile.left,
  awful.layout.suit.tile.bottom,
  awful.layout.suit.tile.top,
  awful.layout.suit.fair,
  awful.layout.suit.fair.horizontal,
  awful.layout.suit.spiral,
  awful.layout.suit.spiral.dwindle,
  awful.layout.suit.max,
}
-- }}}

-- {{{ Tags
tags = {}
tags[1] = awful.tag(
  { "term", "ed", "other" },
  1,
  { layouts[2], layouts[2], layouts[1] }
)
tags[2] = awful.tag(
  { "web", "mail", "other" },
  2,
  { layouts[4], layouts[2], layouts[1] }
)
-- }}}

-- {{{ Freedesktop Menu
mymainmenu = awful.menu.new({ items = require("menugen").build_menu(),
                              theme = { height = 16, width = 130 }})
-- }}}

-- {{{ Wibox
markup = lain.util.markup

-- Textclock
clockicon = wibox.widget.imagebox(beautiful.widget_clock)
mytextclock = lain.widgets.abase({
  timeout  = 60,
  cmd      = "date +'%A %d %B %R'",
  settings = function()
    local t_output = ""
    local o_it = string.gmatch(output, "%S+")

    for i=1,3 do t_output = t_output .. " " .. o_it(i) end

    widget:set_markup(markup("#7788af", t_output) .. markup("#343639", " > ") .. markup("#de5e1e", o_it(1)) .. " ")
  end
})

-- Calendar
lain.widgets.calendar:attach(mytextclock, { font_size = 10 })

-- / fs
fsicon = wibox.widget.imagebox(beautiful.widget_fs)
fswidget = lain.widgets.fs({
  settings  = function()
    widget:set_markup(markup("#80d9d8", fs_now.used .. "% "))
  end
})

-- CPU
cpuicon = wibox.widget.imagebox()
cpuicon:set_image(beautiful.widget_cpu)
cpuwidget = lain.widgets.cpu({
  settings = function()
    widget:set_markup(markup("#e33a6e", cpu_now.usage .. "% "))
  end
})

-- Coretemp
tempicon = wibox.widget.imagebox(beautiful.widget_temp)
tempwidget = lain.widgets.temp({
  tempfile = "/sys/class/thermal/thermal_zone2/temp",
  settings = function()
    widget:set_markup(markup("#f1af5f", coretemp_now .. "Â°C "))
  end
})

-- ALSA volume
volicon = wibox.widget.imagebox(beautiful.widget_vol)
volumewidget = lain.widgets.alsa({
  settings = function()
    if volume_now.status == "off" then
      volume_now.level = volume_now.level .. "M"
    end

    widget:set_markup(markup("#7493d2", volume_now.level .. "% "))
  end
})

-- Net
netdownicon = wibox.widget.imagebox(beautiful.widget_netdown)
netdowninfo = wibox.widget.textbox()
netupicon = wibox.widget.imagebox(beautiful.widget_netup)
netupinfo = lain.widgets.net({
  settings = function()
    widget:set_markup(markup("#e54c62", net_now.sent .. " "))
    netdowninfo:set_markup(markup("#87af5f", net_now.received .. " "))
  end
})

-- MEM
memicon = wibox.widget.imagebox(beautiful.widget_mem)
memwidget = lain.widgets.mem({
  settings = function()
    widget:set_markup(markup("#e0da37", mem_now.used .. "M "))
  end
})

-- Mocp
mocicon = wibox.widget.imagebox(beautiful.widget_note_on)
mocwidget = lain.widgets.abase({
  timeout  = 5,
  cmd      = "mocp -Q '%A - %t'",
  settings = function()
    widget:set_markup(markup("#7788af", output))
  end
})

-- Spacer
spacer = wibox.widget.textbox(" ")
-- }}}

-- {{{ Layout

-- Create a wibox for each screen and add it
mywibox = {}
mypromptbox = {}
mylayoutbox = {}
mytaglist = {}
mytaglist.buttons = awful.util.table.join(
                    awful.button({ }, 1, awful.tag.viewonly),
                    awful.button({ modkey }, 1, awful.client.movetotag),
                    awful.button({ }, 3, awful.tag.viewtoggle),
                    awful.button({ modkey }, 3, awful.client.toggletag),
                    awful.button({ }, 4, function(t) awful.tag.viewnext(awful.tag.getscreen(t)) end),
                    awful.button({ }, 5, function(t) awful.tag.viewprev(awful.tag.getscreen(t)) end)
                    )
mytasklist = {}
mytasklist.buttons = awful.util.table.join(
                     awful.button({ }, 1, function (c)
                                            if c == client.focus then
                                              c.minimized = true
                                            else
                                              -- Without this, the following
                                              -- :isvisible() makes no sense
                                              c.minimized = false
                                              if not c:isvisible() then
                                                  awful.tag.viewonly(c:tags()[1])
                                              end
                                              -- This will also un-minimize
                                              -- the client, if needed
                                              client.focus = c
                                              c:raise()
                                            end
                                          end),
                     awful.button({ }, 3, function ()
                                            if instance then
                                              instance:hide()
                                              instance = nil
                                            else
                                              instance = awful.menu.clients({ width=250 })
                                            end
                                          end),
                     awful.button({ }, 4, function ()
                                            awful.client.focus.byidx(1)
                                            if client.focus then client.focus:raise() end
                                          end),
                     awful.button({ }, 5, function ()
                                            awful.client.focus.byidx(-1)
                                            if client.focus then client.focus:raise() end
                                          end))

for s = 1, screen.count() do
  -- Create a promptbox for each screen
  mypromptbox[s] = awful.widget.prompt()

  -- We need one layoutbox per screen.
  mylayoutbox[s] = awful.widget.layoutbox(s)
  mylayoutbox[s]:buttons(awful.util.table.join(
                          awful.button({ }, 1, function () awful.layout.inc(layouts, 1) end),
                          awful.button({ }, 3, function () awful.layout.inc(layouts, -1) end),
                          awful.button({ }, 4, function () awful.layout.inc(layouts, 1) end),
                          awful.button({ }, 5, function () awful.layout.inc(layouts, -1) end)))

  -- Create a taglist widget
  mytaglist[s] = awful.widget.taglist(s, awful.widget.taglist.filter.all, mytaglist.buttons)

  -- Create the upper wibox
  mywibox[s] = awful.wibox({ position = "top", screen = s, height = 20 })

  -- Widgets that are aligned to the upper left
  local left_layout = wibox.layout.fixed.horizontal()
  left_layout:add(mytaglist[s])
  left_layout:add(mylayoutbox[s])
  left_layout:add(mypromptbox[s])

  -- Widgets that are aligned to the upper right
  local right_layout = wibox.layout.fixed.horizontal()
  if s == 1 then right_layout:add(wibox.widget.systray()) end
  right_layout:add(mocicon)
  right_layout:add(mocwidget)
  right_layout:add(netdownicon)
  right_layout:add(netdowninfo)
  right_layout:add(netupicon)
  right_layout:add(netupinfo)
  right_layout:add(volicon)
  right_layout:add(volumewidget)
  right_layout:add(memicon)
  right_layout:add(memwidget)
  right_layout:add(cpuicon)
  right_layout:add(cpuwidget)
  right_layout:add(fsicon)
  right_layout:add(fswidget)
  right_layout:add(tempicon)
  right_layout:add(tempwidget)
  right_layout:add(clockicon)
  right_layout:add(mytextclock)

  -- Now bring it all together
  local layout = wibox.layout.align.horizontal()
  layout:set_left(left_layout)
  layout:set_right(right_layout)

  mywibox[s]:set_widget(layout)
end
-- }}}

-- {{{ Mouse Bindings
root.buttons(awful.util.table.join(
  awful.button({ }, 3, function () mymainmenu:toggle() end),
  awful.button({ }, 4, awful.tag.viewnext),
  awful.button({ }, 5, awful.tag.viewprev)
))
-- }}}

-- {{{ Key bindings
globalkeys = awful.util.table.join(
  -- Tag browsing
  awful.key({ altkey, "Shift" }, "n",   awful.tag.viewnext       ),
  awful.key({ altkey, "Shift" }, "p",   awful.tag.viewprev       ),
  awful.key({ altkey, "Shift" }, "tab", awful.tag.history.restore),

  awful.key({ modkey, "Shift" }, "n",
    function ()
      if client.focus then
        local next = awful.tag.getidx() + 1
        local tag = awful.tag.gettags(client.focus.screen)[next]
        if tag then
          awful.client.movetotag(tag)
          awful.tag.viewnext()
        end
     end
    end),

  awful.key({ modkey, "Shift" }, "p",
    function ()
      if client.focus then
        local previous = awful.tag.getidx() - 1
        local tag = awful.tag.gettags(client.focus.screen)[previous]
        if tag then
          awful.client.movetotag(tag)
          awful.tag.viewprev()
        end
     end
    end),

  -- Non-empty tag browsing
  awful.key({ altkey }, "p", function () lain.util.tag_view_nonempty(-1) end),
  awful.key({ altkey }, "n", function () lain.util.tag_view_nonempty(1) end),

  -- Dynamic tagging
  awful.key({ modkey, "Shift" }, "a", function () lain.util.add_tag(mypromptbox) end),
  awful.key({ modkey, "Shift" }, "d", function () lain.util.remove_tag() end),


  -- Show/Hide Wibox
  awful.key({ modkey }, "b", function ()
      mywibox[mouse.screen].visible = not mywibox[mouse.screen].visible
  end),

  -- Layout manipulation
  awful.key({ altkey }, "o", function () awful.screen.focus_relative(1) end),
  awful.key({ altkey }, "u", awful.client.urgent.jumpto                    ),

  -- Standard program
  awful.key({ modkey }, "u", function () awful.util.spawn(terminal) end),
  awful.key({ modkey }, "t", function () awful.util.spawn("thunar") end),
  awful.key({ modkey }, "f", function () awful.util.spawn("firefox") end),
  awful.key({ modkey }, "w", function () awful.util.spawn(browser) end),

  -- Awesome controls
  awful.key({ modkey, "Shift"   }, "r", awesome.restart),
  awful.key({ modkey, "Shift"   }, "q", awesome.quit),

  -- Dropdown terminal
  awful.key({ modkey,	          }, "z",      function () drop(terminal) end),

  -- Volume control
  awful.key({ }, "XF86AudioRaiseVolume", function ()
    awful.util.spawn("amixer set Master 9%+",       false) end),
  awful.key({ }, "XF86AudioLowerVolume", function ()
    awful.util.spawn("amixer set Master 9%-",       false) end),
  awful.key({ }, "XF86AudioMute",        function ()
    awful.util.spawn("amixer sset Master toggle",   false) end),
  awful.key({ }, "XF86AudioPrev",        function ()
     awful.util.spawn("mocp -r",                    false) end),
  awful.key({ }, "XF86AudioNext",        function ()
    awful.util.spawn("mocp -f",                     false) end),
  awful.key({ }, "XF86AudioPlay",        function ()
    awful.util.spawn("mocp -G",                     false) end),

  -- Prompt
  awful.key({ altkey }, "F2", function () mypromptbox[mouse.screen]:run() end)
)

clientkeys = awful.util.table.join(
  awful.key({ modkey,           }, "f",      function (c) c.fullscreen = not c.fullscreen  end),
  awful.key({ modkey, "Shift"   }, "c",      function (c) c:kill()                         end),
  awful.key({ modkey, "Control" }, "space",  awful.client.floating.toggle                     ),
  awful.key({ modkey,           }, "o",      awful.client.movetoscreen                        )
)

-- Bind all key numbers to tags.
-- be careful: we use keycodes to make it works on any keyboard layout.
-- This should map on the top row of your keyboard, usually 1 to 9.
for i = 1, 9 do
  globalkeys = awful.util.table.join(globalkeys,
    -- View tag only.
    awful.key({ modkey }, "#" .. i + 9,
              function ()
                local screen = mouse.screen
                local tag = awful.tag.gettags(screen)[i]
                if tag then
                   awful.tag.viewonly(tag)
                end
              end),
    -- Toggle tag.
    awful.key({ modkey, "Control" }, "#" .. i + 9,
              function ()
                local screen = mouse.screen
                local tag = awful.tag.gettags(screen)[i]
                if tag then
                   awful.tag.viewtoggle(tag)
                end
              end),
    -- Move client to tag.
    awful.key({ modkey, "Shift" }, "#" .. i + 9,
              function ()
                if client.focus then
                    local tag = awful.tag.gettags(client.focus.screen)[i]
                    if tag then
                        awful.client.movetotag(tag)
                    end
                end
              end),
    -- Toggle tag.
    awful.key({ modkey, "Control", "Shift" }, "#" .. i + 9,
              function ()
                if client.focus then
                  local tag = awful.tag.gettags(client.focus.screen)[i]
                  if tag then
                      awful.client.toggletag(tag)
                  end
                end
              end))
end

clientbuttons = awful.util.table.join(
    awful.button({ }, 1, function (c) client.focus = c; c:raise() end),
    awful.button({ modkey }, 1, awful.mouse.client.move),
    awful.button({ modkey }, 3, awful.mouse.client.resize))

-- Set keys
root.keys(globalkeys)
-- }}}

-- {{{ Rules
awful.rules.rules = {
    -- All clients will match this rule.
    { rule = { },
      properties = { border_width = beautiful.border_width,
                     border_color = beautiful.border_normal,
                     focus = awful.client.focus.filter,
                     keys = clientkeys,
                     buttons = clientbuttons,
	                   size_hints_honor = false } },
    { rule = { class = "URxvt" },
      properties = { tag = tags[1][1]} },

    { rule = { class = "chromium-browser-chromium" },
      properties = { tag = tags[2][1]} },

    { rule = { class = "Thunderbird" },
      properties = { tag = tags[2][2]} },

    { rule = { class = "Atom" },
      properties = { tag = tags[1][2]} },

    { rule = { class = "Thunar" },
      properties = { tag = tags[1][3]} },

    { rule = { class = "MPlayer" },
          properties = { floating = true } },

    { rule = { instance = "plugin-container" },
          properties = { tag = tags[1][1] } },

	  { rule = { class = "Gimp" },
     	    properties = { tag = tags[1][3] } },
}
-- }}}

-- {{{ Signals
-- signal function to execute when a new client appears.
local sloppyfocus_last = {c=nil}
client.connect_signal("manage", function (c, startup)
    -- Enable sloppy focus
    client.connect_signal("mouse::enter", function(c)
         if awful.layout.get(c.screen) ~= awful.layout.suit.magnifier
            and awful.client.focus.filter(c) then
             -- Skip focusing the client if the mouse wasn't moved.
             if c ~= sloppyfocus_last.c then
                 client.focus = c
                 sloppyfocus_last.c = c
             end
         end
     end)

    local titlebars_enabled = false
    if titlebars_enabled and (c.type == "normal" or c.type == "dialog") then
        -- buttons for the titlebar
        local buttons = awful.util.table.join(
                awful.button({ }, 1, function()
                    client.focus = c
                    c:raise()
                    awful.mouse.client.move(c)
                end),
                awful.button({ }, 3, function()
                    client.focus = c
                    c:raise()
                    awful.mouse.client.resize(c)
                end)
                )

        -- widgets that are aligned to the right
        local right_layout = wibox.layout.fixed.horizontal()
        right_layout:add(awful.titlebar.widget.floatingbutton(c))
        right_layout:add(awful.titlebar.widget.maximizedbutton(c))
        right_layout:add(awful.titlebar.widget.stickybutton(c))
        right_layout:add(awful.titlebar.widget.ontopbutton(c))
        right_layout:add(awful.titlebar.widget.closebutton(c))

        -- the title goes in the middle
        local middle_layout = wibox.layout.flex.horizontal()
        local title = awful.titlebar.widget.titlewidget(c)
        title:set_align("center")
        middle_layout:add(title)
        middle_layout:buttons(buttons)

        -- now bring it all together
        local layout = wibox.layout.align.horizontal()
        layout:set_right(right_layout)
        layout:set_middle(middle_layout)

        awful.titlebar(c,{size=16}):set_widget(layout)
    end
end)

-- No border for maximized clients
client.connect_signal("focus",
  function(c)
    if c.maximized_horizontal == true and c.maximized_vertical == true then
        c.border_color = beautiful.border_normal
    else
        c.border_color = beautiful.border_focus
    end
  end)
client.connect_signal("unfocus", function(c) c.border_color = beautiful.border_normal end)
-- }}}

-- {{{ Arrange signal handler
-- for s = 1, screen.count() do screen[s]:connect_signal("arrange", function ()
--     local clients = awful.client.visible(s)
--     local layout  = awful.layout.getname(awful.layout.get(s))
--
--     if #clients > 0 then -- Fine grained borders and floaters control
--       for _, c in pairs(clients) do -- Floaters always have borders
--         -- No borders with only one humanly visible client
--         if layout == "max" then
--           c.border_width = 0
--         elseif awful.client.floating.get(c) or layout == "floating" then
--           c.border_width = beautiful.border_width
--         elseif #clients == 1 then
--           clients[1].border_width = 0
--           if layout ~= "max" then
--               awful.client.moveresize(0, 0, 2, 0, clients[1])
--           end
--         else
--           c.border_width = beautiful.border_width
--         end
--       end
--     end
--   end)
-- end
-- }}}
